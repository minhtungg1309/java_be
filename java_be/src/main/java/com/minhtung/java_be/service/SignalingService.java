package com.minhtung.java_be.service;

import com.corundumstudio.socketio.SocketIOClient;
import com.corundumstudio.socketio.SocketIOServer;
import com.minhtung.java_be.dto.signaling.*;
import com.minhtung.java_be.entity.ParticipantInfo;
import com.minhtung.java_be.entity.WebSocketSession;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class SignalingService {
    SocketIOServer server;
    WebSocketSessionService webSocketSessionService;
    ConversationService conversationService;

    public void handleCallOffer(CallOffer callOffer) {
        log.info("üìû [BE] Nh·∫≠n call-offer t·ª´ userId={} conversationId={}",
                callOffer.getCallerId(), callOffer.getConversationId());

        // L·∫•y danh s√°ch participant
        List<String> participants = conversationService.getParticipantIds(callOffer.getConversationId());
        log.info("üë• Participants trong conversation: {}", participants);

        if (participants.isEmpty()) {
            log.warn("‚ö†Ô∏è Kh√¥ng c√≥ participant n√†o trong conversation {}", callOffer.getConversationId());
            return;
        }

        // Ki·ªÉm tra callerId c√≥ h·ª£p l·ªá kh√¥ng
        if (!participants.contains(callOffer.getCallerId())) {
            log.warn("‚ö†Ô∏è CallerId {} kh√¥ng n·∫±m trong conversation {}",
                    callOffer.getCallerId(), callOffer.getConversationId());
            return;
        }

        // L·∫•y th√¥ng tin callerInfo t·ª´ Conversation
        ParticipantInfo caller = conversationService.getParticipantInfo(
                callOffer.getConversationId(), callOffer.getCallerId());

        CallerInfo callerInfo = CallerInfo.builder()
                .username(caller.getUsername())
                .firstName(caller.getFirstName())
                .lastName(caller.getLastName())
                .avatar(caller.getAvatar())
                .displayName(
                        (caller.getFirstName() != null ? caller.getFirstName() + " " : "")
                                + (caller.getLastName() != null ? caller.getLastName() : caller.getUsername())
                )
                .build();

        callOffer.setCallerInfo(callerInfo);
        log.info("‚úÖ CallerInfo ƒë∆∞·ª£c g·∫Øn v√†o callOffer: {}", callOffer.getCallerInfo());

        // G·ª≠i cho t·∫•t c·∫£ participant kh√°c
        for (String userId : participants) {
            if (!userId.equals(callOffer.getCallerId())) {
                sendToUser(userId, "incoming-call", callOffer);
            }
        }
    }


    public void handleCallAnswer(CallAnswer callAnswer) {
        log.info("üìû [BE] Nh·∫≠n call-answer t·ª´ conversationId={}, data={}",
                callAnswer.getConversationId(), callAnswer);

        List<String> participants = conversationService.getParticipantIds(callAnswer.getConversationId());
        for (String userId : participants) {
            sendToUser(userId, "call-answered", callAnswer);
        }
    }

    public void handleIceCandidate(IceCandidate iceCandidate) {
        log.info("üì° [BE] Nh·∫≠n ice-candidate t·ª´ conversationId={}, data={}",
                iceCandidate.getConversationId(), iceCandidate);

        List<String> participants = conversationService.getParticipantIds(iceCandidate.getConversationId());
        for (String userId : participants) {
            sendToUser(userId, "ice-candidate", iceCandidate);
        }
    }

    public void handleCallEvent(CallEvent callEvent) {
        log.info("üì¢ [BE] Nh·∫≠n call-event={} t·ª´ conversationId={}, data={}",
                callEvent.getEvent(), callEvent.getConversationId(), callEvent);

        List<String> participants = conversationService.getParticipantIds(callEvent.getConversationId());
        for (String userId : participants) {
            sendToUser(userId, "call-status", callEvent);
        }
    }

    private void sendToUser(String userId, String event, Object data) {
        List<WebSocketSession> sessions = webSocketSessionService.findByUserId(userId);
        log.info("üîç T√¨m th·∫•y {} sessions cho user {}", sessions.size(), userId);

        for (WebSocketSession session : sessions) {
            SocketIOClient client = server.getClient(UUID.fromString(session.getSocketSessionId()));
            if (client != null && client.isChannelOpen()) {
                log.info("‚¨áÔ∏è [BE->FE] Emit event [{}] t·ªõi user={} session={}, data={}",
                        event, userId, session.getSocketSessionId(), data);
                client.sendEvent(event, data);
            } else {
                log.warn("‚ùå Client kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë√≥ng cho session {}", session.getSocketSessionId());
            }
        }
    }
}
